#define  _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//int ADD(int x, int y) {
//	return x + y;
//}
//
//int Sub(int x, int y) {
//	return x - y;
//}
//
//int Mul(int x, int y) {
//	return x * y;
//}
//
//int Div(int x, int y) {
//	return x / y;
//}

//int main() {
//	int a = 10;
//	int b = 20;
//	/*int (*p1)(int, int) = ADD;
//	int (*p2)(int, int) = Sub;
//	printf("%d\n", p1(10, 20));
//	printf("%d\n", p2(10, 20));*/
//	//这是最普通的用不同的函数指针来调用函数，接下来用函数指针
//	int (*ptf[2])(int, int) = { ADD,Sub };//ptf就是一个函数指针数组，里面存放的就是函数指针，也就是函数的地址
//	for (int i = 0;i < 2;i++) {
//		int ret = ptf[i](a, b);
//		printf("%d\n", ret);
//	}
//
//	return 0;
//}
//void menu() {
//	printf("==================\n");
//	printf("====1,加法操作====\n");
//	printf("====2,减法操作====\n");
//	printf("====3,乘法操作====\n");
//	printf("====4,除法操作====\n");
//	printf("====0,退出操作====\n");
//	printf("==================\n");
//}
//int main() {
//	int ret = 0;
//	do {
//		int a = 0;
//		int b = 0;
//		menu();
//		printf("请输入您想要进行的计算操作>>>");
//		scanf("%d", &ret);
//		switch (ret) {
//		case 0:
//			printf("退出计算器!\n");
//			break;
//		case 1:
//			printf("请输入两个操作数>>>");
//			scanf("%d %d", &a, &b);
//			printf("计算结果为 %d\n",ADD(a, b));
//			break;
//		case 2:
//			printf("请输入两个操作数>>>");
//			scanf("%d %d", &a, &b);
//			printf("计算结果为 %d\n", Sub(a, b));
//			break;
//		case 3:
//			printf("请输入两个操作数>>>");
//			scanf("%d %d", &a, &b);
//			printf("计算结果为 %d\n",Mul(a, b));
//			break;
//		case 4:
//			printf("请输入两个操作数>>>");
//			scanf("%d %d", &a, &b);
//			printf("计算结果为 %d\n",Div(a, b));
//			break;
//		default:
//			printf("输入错误!\n");
//			break;
//		}
//	} while (ret);
//	return 0;
//}
//int main() {
//	int (*p[5])(int, int) = { 0,ADD,Sub,Mul,Div };
//	int sz = sizeof(p) / sizeof(p[0]);
//	int ret = 0;
//	do {
//		int a = 0;
//		int b = 0;
//		menu();
//		printf("请输入您想要进行的计算操作>>>");
//		scanf("%d", &ret);
//		if (ret == 0) {
//			printf("退出成功!");
//			break;
//		}
//		else if (ret > 0 && ret < sz) {
//			printf("请输入两个操作数>>>");
//			scanf("%d %d", &a, &b);
//			printf("计算结果为 %d\n", p[ret](a,b));
//		}
//		else {
//			printf("输入错误!");
//			break;
//		}
//	} while (ret);
//
//	return 0;
//}
//int main() {
//	int a = 0;
//	int b = 0;
//	int c = 0;
//	scanf("%d %d %d", &a, &b, &c);
//	int arr[3] = { a,b,c };
//	int max = arr[0];
//	for (int i = 1;i < 3;i++) {
//		for (int j = 0;j < 3 - i;j++) {
//			if (arr[j] < arr[j + 1]) {
//				int tmp = arr[j];
//				arr[j] = arr[j + 1];
//				arr[j + 1] = tmp;
//			}
//		}
//		
//	}
//	for (int i = 0;i < 3;i++) {
//		printf("%d ", arr[i]);
//	}
//}
//int test(int j) {
//	int total = 0;
//	for (int i = 1;i <= j;i++) {
//		total += 1;
//	}
//	return total;
//}
//int main() {
	/*for (int i = 1;i <= 100;i++) {
		if (i % 3 == 0) {
			printf("%d ", i);
		}
	
	}*/
	/*int a = 0;
	int b = 0;
	int tmp = 0;
	scanf("%d %d", &a, &b);
	for (int i = 1;i < b;i++) {
		if ((a % i == 0) && (b % i == 0))
		{
			tmp = i;
		}
	}
	printf("最大公约数是 %d\n", tmp);*/
	/*for (int i = 1000;i <= 2000;i++) {
		if ((i % 4 == 0 && i % 100 != 0) || (i % 400 == 0))
			printf("%d ", i);
	}
	return 0;*/
	/*for (int i = 101;i <= 200;i++) {
		int j = 0;
		for (j = 2;j <= i/2;j++) {
			if (i % j == 0) {
				break;
			}
		}

		if (j > i / 2) {
			printf("%d ", i);
		
		}


	
	}*/
	/*int count = 0;
	for (int i = 9;i <= 100;i++) {
		int tmp = i;
		while (tmp) {
			if (tmp % 10 == 9) {
				count++;
			}
			tmp /= 10;
		}
	
	}
	printf("%d\n", count);*/
	/*for (int i = 1;i <= 9;i++) {
		for (int j = 1;j <= i;j++) {
			printf("%d * %d = %d\t", i, j, i * j);
		}
		printf("\n");
	}*/

	/*int arr[10] = { 0 };
	for (int i = 0;i < 10;i++) {
		scanf("%d", &arr[i]);
	}

	int max = arr[0];
	for (int j = 1;j < 10;j++) {
		if (max < arr[j]) {
			max = arr[j];
		}
	}
	printf("最大值是%d\n", max);*/
	
	/*float sum = 0;
	for (int i = 1;i <= 100;i++) {
		if (i % 2 == 0) {
			sum -= ((float)1)/test(i);
		}
		else {
			sum += ((float)1)/test(i);
		}
	}
	printf("%f\n", sum);
	*/
//}
#include<limits.h>
//INT_MAX  2147483647 在计算机中整形最大就只能这么大
//练习
//1. 计算 n的阶乘。
//2. 计算 1!+ 2!+ 3!+ …… + 10!
//3. 在一个有序数组中查找具体的某个数字n。（讲解二分查找）
//4. 编写代码，演示多个字符从两端移动，向中间汇聚。
//5. 编写代码实现，模拟用户登录情景，并且只能登录三次。（只允许输入三次密码，如果密码正确则
//提示登录成，如果三次均输入错误，则退出程序
//int main() {
//	int n = 0;
//	scanf("%d", &n);//这里最好不要输入一些特别大的数进行计算，因为计算机对于int类型的数据也是有一上限的，太大的数存不下就会溢出
//	int ret = 1;
//	for (int i = 1;i <= n;i++) {
//		ret *= i;
//	}
//	printf("%d\n", ret);
//	return 0;
//}
//int main() {
//	int sum = 0;
//	/*for (int i = 1;i <= 10;i++) {
//		int ret = 1;
//		for (int j = 1;j <= i;j++) {
//			ret *= j;
//		}
//		sum += ret;
//	}*/  //双层for循环效率太低，其实我们阶乘可以在前一次的基础上下手
//
//	int ret = 1;
//	int n = 10;
//	for (int i = 1;i <= n;i++) {
//		ret *= i;//把前一次阶乘的值保留下来，在此基础上再去乘
//		sum += ret;
//	}
//	printf("%d\n", sum);
//
//	return 0;
//}
//int main() {
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int k = 0;
//	printf("请输入你想要查找的元素:");
//	scanf("%d", &k);
//	int left = 0;
//	int right = 9;
//	while (left <= right) {
//		int mid = (left + right) / 2;
//		if (k < arr[mid]) {
//			right = mid - 1;
//		}
//		else if (k > arr[mid]) {
//			left = mid + 1;
//		}
//		else {
//			printf("找到了\n");
//			printf("下标为%d\n", mid);
//			break;
//		}
//	}
//	if (left > right) {
//		printf("找不到");
//	}
//	
//
//
//	return 0;
//}